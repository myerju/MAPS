}
```
There are a few where the session started before the webcamera so if the difference is < 0, the difference will be subtracted from the timestamp and if the difference is > 0, the difference will be added to the timestamp.
```{r adjust_sync}
#create an ID column in log
log <- log %>%
mutate(ID = id)
#make ID a character type
video_sync$ID <- as.character(video_sync$ID)
#left join by ID number
log_sync <- left_join(log, video_sync, by = c("ID"))
#create new vectors of timestamp_sec for log_nodesc and eyetracker
log_timestamp_sec <- (as.numeric(as.POSIXct(strptime(log$timestamp, format = "%H:%M:%OS"))) -
as.numeric(as.POSIXct(strptime("0", format = "%S"))))
#Create a new column for join
log_sync <- log_sync%>%
mutate(timestamp_sec = log_timestamp_sec)
#mutate a new column based on if difference is positive or negative
log_sync <- mutate(log_sync, webcam_timestamp_sec =
ifelse(vid_diff > 0, timestamp_sec + vid_diff,
timestamp_sec - abs(vid_diff)))
#fix the format for a column in format HH:MM:SS.msec
webcam_timestamp <- format(.POSIXct(log_sync$webcam_timestamp_sec), "%M:%OS")
webcam_timestamp <- paste0("00:", webcam_timestamp)
log_sync <- log_sync %>%
mutate(webcam_timestamp = webcam_timestamp)
```
```{r delete_extra_col}
extra <- c("ID", "one_time", "one_time_sec", "touch_time", "touch_time_sec", "webcam_beep", "maincomp_beep", "notes")
log_sync <- log_sync[, !names(log_sync) %in% extra]
```
##Export Synced Log file
```{r export_csv}
write.csv(log_sync, file =paste("", "Volumes", "MAPS1", "Participant Recordings", id, "synced", paste(id,"_log_webcam_sync.csv", sep = ""), sep = "/"))
```
pkgs <- c("dplyr", "tidyr", "readr", "lubridate") # list packages needed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
suppressMessages(ipak(pkgs)) # take function, and give it that list
#enter child ID - eventually mega script will define this
id <- "MAPS-011"
sync_type1 <- c("MAPS-001", "MAPS-002", "MAPS-003", "MAPS-004", "MAPS-005", "MAPS-006", "MAPS-007", "MAPS-008", "MAPS-009", "MAPS-010", "MAPS-011", "MAPS-012")
#on julianne's computer
username <- "myerju"
#on julianne's laptop
#username <- "julianne"
#import data
log <-  read_tsv(paste("", "Volumes", "MAPS1", "Participant Recordings", id, "raw", paste(id,"_log.tsv", sep = ""), sep = "/"))
video_sync <- read.csv(paste("", "Users", username, "Box Sync", "MAPS", "Data", "Sync", "sync_timestamps.csv", sep = "/"), header = T) #csv of manually recorded timestamps
if (id %in% sync_type1) {
video_sync <- mutate(video_sync, vid_diff = one_time_sec - touch_time_sec)
} else {
video_sync <- mutate(video_sync, vid_diff = webcam_beep_start_sec - maincomp_beep_start_sec)
}
#create an ID column in log
log <- log %>%
mutate(ID = id)
#make ID a character type
video_sync$ID <- as.character(video_sync$ID)
#left join by ID number
log_sync <- left_join(log, video_sync, by = c("ID"))
#create new vectors of timestamp_sec for log_nodesc and eyetracker
log_timestamp_sec <- (as.numeric(as.POSIXct(strptime(log$timestamp, format = "%H:%M:%OS"))) -
as.numeric(as.POSIXct(strptime("0", format = "%S"))))
#Create a new column for join
log_sync <- log_sync%>%
mutate(timestamp_sec = log_timestamp_sec)
#mutate a new column based on if difference is positive or negative
log_sync <- mutate(log_sync, webcam_timestamp_sec =
ifelse(vid_diff > 0, timestamp_sec + vid_diff,
timestamp_sec - abs(vid_diff)))
#fix the format for a column in format HH:MM:SS.msec
webcam_timestamp <- format(.POSIXct(log_sync$webcam_timestamp_sec), "%M:%OS")
webcam_timestamp <- paste0("00:", webcam_timestamp)
log_sync <- log_sync %>%
mutate(webcam_timestamp = webcam_timestamp)
extra <- c("ID", "one_time", "one_time_sec", "touch_time", "touch_time_sec", "webcam_beep", "maincomp_beep", "notes")
log_sync <- log_sync[, !names(log_sync) %in% extra]
write.csv(log_sync, file =paste("", "Volumes", "MAPS1", "Participant Recordings", id, "synced", paste(id,"_log_webcam_sync.csv", sep = ""), sep = "/"))
pkgs <- c("dplyr", "tidyr", "readr", "lubridate") # list packages needed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
suppressMessages(ipak(pkgs)) # take function, and give it that list
#enter child ID - eventually mega script will define this
id <- "MAPS-012"
sync_type1 <- c("MAPS-001", "MAPS-002", "MAPS-003", "MAPS-004", "MAPS-005", "MAPS-006", "MAPS-007", "MAPS-008", "MAPS-009", "MAPS-010", "MAPS-011", "MAPS-012")
#on julianne's computer
username <- "myerju"
#on julianne's laptop
#username <- "julianne"
#import data
log <-  read_tsv(paste("", "Volumes", "MAPS1", "Participant Recordings", id, "raw", paste(id,"_log.tsv", sep = ""), sep = "/"))
video_sync <- read.csv(paste("", "Users", username, "Box Sync", "MAPS", "Data", "Sync", "sync_timestamps.csv", sep = "/"), header = T) #csv of manually recorded timestamps
if (id %in% sync_type1) {
video_sync <- mutate(video_sync, vid_diff = one_time_sec - touch_time_sec)
} else {
video_sync <- mutate(video_sync, vid_diff = webcam_beep_start_sec - maincomp_beep_start_sec)
}
#create an ID column in log
log <- log %>%
mutate(ID = id)
#make ID a character type
video_sync$ID <- as.character(video_sync$ID)
#left join by ID number
log_sync <- left_join(log, video_sync, by = c("ID"))
#create new vectors of timestamp_sec for log_nodesc and eyetracker
log_timestamp_sec <- (as.numeric(as.POSIXct(strptime(log$timestamp, format = "%H:%M:%OS"))) -
as.numeric(as.POSIXct(strptime("0", format = "%S"))))
#Create a new column for join
log_sync <- log_sync%>%
mutate(timestamp_sec = log_timestamp_sec)
#mutate a new column based on if difference is positive or negative
log_sync <- mutate(log_sync, webcam_timestamp_sec =
ifelse(vid_diff > 0, timestamp_sec + vid_diff,
timestamp_sec - abs(vid_diff)))
#fix the format for a column in format HH:MM:SS.msec
webcam_timestamp <- format(.POSIXct(log_sync$webcam_timestamp_sec), "%M:%OS")
webcam_timestamp <- paste0("00:", webcam_timestamp)
log_sync <- log_sync %>%
mutate(webcam_timestamp = webcam_timestamp)
extra <- c("ID", "one_time", "one_time_sec", "touch_time", "touch_time_sec", "webcam_beep", "maincomp_beep", "notes")
log_sync <- log_sync[, !names(log_sync) %in% extra]
write.csv(log_sync, file =paste("", "Volumes", "MAPS1", "Participant Recordings", id, "synced", paste(id,"_log_webcam_sync.csv", sep = ""), sep = "/"))
pkgs <- c("dplyr", "tidyr", "readr", "lubridate") # list packages needed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
suppressMessages(ipak(pkgs)) # take function, and give it that list
#enter child ID - eventually mega script will define this
id <- "MAPS-013"
sync_type1 <- c("MAPS-001", "MAPS-002", "MAPS-003", "MAPS-004", "MAPS-005", "MAPS-006", "MAPS-007", "MAPS-008", "MAPS-009", "MAPS-010", "MAPS-011", "MAPS-012")
#on julianne's computer
username <- "myerju"
#on julianne's laptop
#username <- "julianne"
#import data
log <-  read_tsv(paste("", "Volumes", "MAPS1", "Participant Recordings", id, "raw", paste(id,"_log.tsv", sep = ""), sep = "/"))
pkgs <- c("dplyr", "tidyr", "readr", "lubridate") # list packages needed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
suppressMessages(ipak(pkgs)) # take function, and give it that list
#enter child ID - eventually mega script will define this
id <- "MAPS-014"
sync_type1 <- c("MAPS-001", "MAPS-002", "MAPS-003", "MAPS-004", "MAPS-005", "MAPS-006", "MAPS-007", "MAPS-008", "MAPS-009", "MAPS-010", "MAPS-011", "MAPS-012")
#on julianne's computer
username <- "myerju"
#on julianne's laptop
#username <- "julianne"
#import data
log <-  read_tsv(paste("", "Volumes", "MAPS1", "Participant Recordings", id, "raw", paste(id,"_log.tsv", sep = ""), sep = "/"))
video_sync <- read.csv(paste("", "Users", username, "Box Sync", "MAPS", "Data", "Sync", "sync_timestamps.csv", sep = "/"), header = T) #csv of manually recorded timestamps
if (id %in% sync_type1) {
video_sync <- mutate(video_sync, vid_diff = one_time_sec - touch_time_sec)
} else {
video_sync <- mutate(video_sync, vid_diff = webcam_beep_start_sec - maincomp_beep_start_sec)
}
#create an ID column in log
log <- log %>%
mutate(ID = id)
#make ID a character type
video_sync$ID <- as.character(video_sync$ID)
#left join by ID number
log_sync <- left_join(log, video_sync, by = c("ID"))
#create new vectors of timestamp_sec for log_nodesc and eyetracker
log_timestamp_sec <- (as.numeric(as.POSIXct(strptime(log$timestamp, format = "%H:%M:%OS"))) -
as.numeric(as.POSIXct(strptime("0", format = "%S"))))
#Create a new column for join
log_sync <- log_sync%>%
mutate(timestamp_sec = log_timestamp_sec)
#mutate a new column based on if difference is positive or negative
log_sync <- mutate(log_sync, webcam_timestamp_sec =
ifelse(vid_diff > 0, timestamp_sec + vid_diff,
timestamp_sec - abs(vid_diff)))
#fix the format for a column in format HH:MM:SS.msec
webcam_timestamp <- format(.POSIXct(log_sync$webcam_timestamp_sec), "%M:%OS")
webcam_timestamp <- paste0("00:", webcam_timestamp)
log_sync <- log_sync %>%
mutate(webcam_timestamp = webcam_timestamp)
extra <- c("ID", "one_time", "one_time_sec", "touch_time", "touch_time_sec", "webcam_beep", "maincomp_beep", "notes")
log_sync <- log_sync[, !names(log_sync) %in% extra]
write.csv(log_sync, file =paste("", "Volumes", "MAPS1", "Participant Recordings", id, "synced", paste(id,"_log_webcam_sync.csv", sep = ""), sep = "/"))
pkgs <- c("dplyr", "tidyr", "readr", "lubridate") # list packages needed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
suppressMessages(ipak(pkgs)) # take function, and give it that list
#enter child ID - eventually mega script will define this
id <- "MAPS-015"
sync_type1 <- c("MAPS-001", "MAPS-002", "MAPS-003", "MAPS-004", "MAPS-005", "MAPS-006", "MAPS-007", "MAPS-008", "MAPS-009", "MAPS-010", "MAPS-011", "MAPS-012")
#on julianne's computer
username <- "myerju"
#on julianne's laptop
#username <- "julianne"
#import data
log <-  read_tsv(paste("", "Volumes", "MAPS1", "Participant Recordings", id, "raw", paste(id,"_log.tsv", sep = ""), sep = "/"))
video_sync <- read.csv(paste("", "Users", username, "Box Sync", "MAPS", "Data", "Sync", "sync_timestamps.csv", sep = "/"), header = T) #csv of manually recorded timestamps
if (id %in% sync_type1) {
video_sync <- mutate(video_sync, vid_diff = one_time_sec - touch_time_sec)
} else {
video_sync <- mutate(video_sync, vid_diff = webcam_beep_start_sec - maincomp_beep_start_sec)
}
#create an ID column in log
log <- log %>%
mutate(ID = id)
#make ID a character type
video_sync$ID <- as.character(video_sync$ID)
#left join by ID number
log_sync <- left_join(log, video_sync, by = c("ID"))
#create new vectors of timestamp_sec for log_nodesc and eyetracker
log_timestamp_sec <- (as.numeric(as.POSIXct(strptime(log$timestamp, format = "%H:%M:%OS"))) -
as.numeric(as.POSIXct(strptime("0", format = "%S"))))
#Create a new column for join
log_sync <- log_sync%>%
mutate(timestamp_sec = log_timestamp_sec)
#mutate a new column based on if difference is positive or negative
log_sync <- mutate(log_sync, webcam_timestamp_sec =
ifelse(vid_diff > 0, timestamp_sec + vid_diff,
timestamp_sec - abs(vid_diff)))
#fix the format for a column in format HH:MM:SS.msec
webcam_timestamp <- format(.POSIXct(log_sync$webcam_timestamp_sec), "%M:%OS")
webcam_timestamp <- paste0("00:", webcam_timestamp)
log_sync <- log_sync %>%
mutate(webcam_timestamp = webcam_timestamp)
extra <- c("ID", "one_time", "one_time_sec", "touch_time", "touch_time_sec", "webcam_beep", "maincomp_beep", "notes")
log_sync <- log_sync[, !names(log_sync) %in% extra]
write.csv(log_sync, file =paste("", "Volumes", "MAPS1", "Participant Recordings", id, "synced", paste(id,"_log_webcam_sync.csv", sep = ""), sep = "/"))
pkgs <- c("dplyr", "tidyr", "readr", "lubridate", "fuzzyjoin", "zoo") # list packages needed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
suppressMessages(ipak(pkgs)) # take function, and give it that list
##ID
#enter child ID - eventually mega script will define this
id <- "MAPS-009"
sync_type1 <- c("MAPS-001", "MAPS-002", "MAPS-003", "MAPS-004", "MAPS-005", "MAPS-006", "MAPS-007", "MAPS-008", "MAPS-009", "MAPS-010", "MAPS-011", "MAPS-012")
##Location- servername
#on julianne's computer
username <- "myerju"
#on julianne's laptop
#username <- "julianne"
#import data
log <-  (read.csv(paste("", "Volumes", "MAPS1", "Participant Recordings", id, "synced", paste(id,"_log_webcam_sync.csv", sep = ""), sep = "/")))
log$webcam_timestamp<- as.character(log$webcam_timestamp)
emotion_start <- log %>%
filter(entry=="Emotion Reels/Surprise A.mov") %>%
filter(event=="start") %>%
select(webcam_timestamp)
duration_start <- hms(emotion_start)
emotion_end <- log %>%
filter(entry=="Emotion Reels/Yawning A.mov") %>%
filter(event=="end") %>%
select(webcam_timestamp)
duration_end <- hms(emotion_end)
emotion_duration <- duration_end - duration_start
POSIXct_emotion_duration <- parse_date_time(emotion_duration,"ms")
emotion_duration <- format(POSIXct_emotion_duration, format="%H:%M:%OS")
#emotion_duration <- paste0("00:", emotion_duration)
emotion_times <- cbind(emotion_start, emotion_end, emotion_duration)
colnames(emotion_times) <- c("start", "end", "duration")
write.csv(emotion_times, file = paste("", "Volumes", "MAPS1", "Participant Recordings", id, "CERT", paste(id,"_emotions_timepoints.csv", sep = ""), sep = "/"))
pkgs <- c("dplyr", "tidyr", "readr", "lubridate", "fuzzyjoin", "zoo") # list packages needed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
suppressMessages(ipak(pkgs)) # take function, and give it that list
##ID
#enter child ID - eventually mega script will define this
id <- "MAPS-010"
sync_type1 <- c("MAPS-001", "MAPS-002", "MAPS-003", "MAPS-004", "MAPS-005", "MAPS-006", "MAPS-007", "MAPS-008", "MAPS-009", "MAPS-010", "MAPS-011", "MAPS-012")
##Location- servername
#on julianne's computer
username <- "myerju"
#on julianne's laptop
#username <- "julianne"
#import data
log <-  (read.csv(paste("", "Volumes", "MAPS1", "Participant Recordings", id, "synced", paste(id,"_log_webcam_sync.csv", sep = ""), sep = "/")))
log$webcam_timestamp<- as.character(log$webcam_timestamp)
emotion_start <- log %>%
filter(entry=="Emotion Reels/Surprise A.mov") %>%
filter(event=="start") %>%
select(webcam_timestamp)
duration_start <- hms(emotion_start)
emotion_end <- log %>%
filter(entry=="Emotion Reels/Yawning A.mov") %>%
filter(event=="end") %>%
select(webcam_timestamp)
duration_end <- hms(emotion_end)
emotion_duration <- duration_end - duration_start
POSIXct_emotion_duration <- parse_date_time(emotion_duration,"ms")
emotion_duration <- format(POSIXct_emotion_duration, format="%H:%M:%OS")
#emotion_duration <- paste0("00:", emotion_duration)
emotion_times <- cbind(emotion_start, emotion_end, emotion_duration)
colnames(emotion_times) <- c("start", "end", "duration")
write.csv(emotion_times, file = paste("", "Volumes", "MAPS1", "Participant Recordings", id, "CERT", paste(id,"_emotions_timepoints.csv", sep = ""), sep = "/"))
pkgs <- c("dplyr", "tidyr", "readr", "lubridate", "fuzzyjoin", "zoo") # list packages needed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
suppressMessages(ipak(pkgs)) # take function, and give it that list
##ID
#enter child ID - eventually mega script will define this
id <- "MAPS-011"
sync_type1 <- c("MAPS-001", "MAPS-002", "MAPS-003", "MAPS-004", "MAPS-005", "MAPS-006", "MAPS-007", "MAPS-008", "MAPS-009", "MAPS-010", "MAPS-011", "MAPS-012")
##Location- servername
#on julianne's computer
username <- "myerju"
#on julianne's laptop
#username <- "julianne"
#import data
log <-  (read.csv(paste("", "Volumes", "MAPS1", "Participant Recordings", id, "synced", paste(id,"_log_webcam_sync.csv", sep = ""), sep = "/")))
log$webcam_timestamp<- as.character(log$webcam_timestamp)
emotion_start <- log %>%
filter(entry=="Emotion Reels/Surprise A.mov") %>%
filter(event=="start") %>%
select(webcam_timestamp)
duration_start <- hms(emotion_start)
emotion_end <- log %>%
filter(entry=="Emotion Reels/Yawning A.mov") %>%
filter(event=="end") %>%
select(webcam_timestamp)
duration_end <- hms(emotion_end)
emotion_duration <- duration_end - duration_start
POSIXct_emotion_duration <- parse_date_time(emotion_duration,"ms")
emotion_duration <- format(POSIXct_emotion_duration, format="%H:%M:%OS")
#emotion_duration <- paste0("00:", emotion_duration)
emotion_times <- cbind(emotion_start, emotion_end, emotion_duration)
pkgs <- c("dplyr", "tidyr", "readr", "lubridate", "fuzzyjoin", "zoo") # list packages needed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
suppressMessages(ipak(pkgs)) # take function, and give it that list
##ID
#enter child ID - eventually mega script will define this
id <- "MAPS-012"
sync_type1 <- c("MAPS-001", "MAPS-002", "MAPS-003", "MAPS-004", "MAPS-005", "MAPS-006", "MAPS-007", "MAPS-008", "MAPS-009", "MAPS-010", "MAPS-011", "MAPS-012")
##Location- servername
#on julianne's computer
username <- "myerju"
#on julianne's laptop
#username <- "julianne"
#import data
log <-  (read.csv(paste("", "Volumes", "MAPS1", "Participant Recordings", id, "synced", paste(id,"_log_webcam_sync.csv", sep = ""), sep = "/")))
log$webcam_timestamp<- as.character(log$webcam_timestamp)
emotion_start <- log %>%
filter(entry=="Emotion Reels/Surprise A.mov") %>%
filter(event=="start") %>%
select(webcam_timestamp)
duration_start <- hms(emotion_start)
emotion_end <- log %>%
filter(entry=="Emotion Reels/Yawning A.mov") %>%
filter(event=="end") %>%
select(webcam_timestamp)
duration_end <- hms(emotion_end)
emotion_duration <- duration_end - duration_start
POSIXct_emotion_duration <- parse_date_time(emotion_duration,"ms")
emotion_duration <- format(POSIXct_emotion_duration, format="%H:%M:%OS")
#emotion_duration <- paste0("00:", emotion_duration)
emotion_times <- cbind(emotion_start, emotion_end, emotion_duration)
colnames(emotion_times) <- c("start", "end", "duration")
write.csv(emotion_times, file = paste("", "Volumes", "MAPS1", "Participant Recordings", id, "CERT", paste(id,"_emotions_timepoints.csv", sep = ""), sep = "/"))
pkgs <- c("dplyr", "tidyr", "readr", "lubridate", "fuzzyjoin", "zoo") # list packages needed
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
suppressMessages(ipak(pkgs)) # take function, and give it that list
##ID
#enter child ID - eventually mega script will define this
id <- "MAPS-012"
sync_type1 <- c("MAPS-001", "MAPS-002", "MAPS-003", "MAPS-004", "MAPS-005", "MAPS-006", "MAPS-007", "MAPS-008", "MAPS-009", "MAPS-010", "MAPS-011", "MAPS-012")
##Location- servername
#on julianne's computer
username <- "myerju"
#on julianne's laptop
#username <- "julianne"
#import data
log <-  (read.csv(paste("", "Volumes", "MAPS1", "Participant Recordings", id, "synced", paste(id,"_log_webcam_sync.csv", sep = ""), sep = "/")))
log$webcam_timestamp<- as.character(log$webcam_timestamp)
emotion_start <- log %>%
filter(entry=="Emotion Reels/Surprise A.mov") %>%
filter(event=="start") %>%
select(webcam_timestamp)
duration_start <- hms(emotion_start)
emotion_end <- log %>%
filter(entry=="Emotion Reels/Yawning A.mov") %>%
filter(event=="end") %>%
select(webcam_timestamp)
duration_end <- hms(emotion_end)
emotion_duration <- duration_end - duration_start
POSIXct_emotion_duration <- parse_date_time(emotion_duration,"ms")
emotion_duration <- format(POSIXct_emotion_duration, format="%H:%M:%OS")
#emotion_duration <- paste0("00:", emotion_duration)
emotion_times <- cbind(emotion_start, emotion_end, emotion_duration)
colnames(emotion_times) <- c("start", "end", "duration")
write.csv(emotion_times, file = paste("", "Volumes", "MAPS1", "Participant Recordings", id, "CERT", paste(id,"_emotions_timepoints.csv", sep = ""), sep = "/"))
##ID
#enter child ID - eventually mega script will define this
id <- "MAPS-011"
sync_type1 <- c("MAPS-001", "MAPS-002", "MAPS-003", "MAPS-004", "MAPS-005", "MAPS-006", "MAPS-007", "MAPS-008", "MAPS-009", "MAPS-010", "MAPS-011", "MAPS-012")
##Location- servername
#on julianne's computer
username <- "myerju"
#on julianne's laptop
#username <- "julianne"
#import data
log <-  (read.csv(paste("", "Volumes", "MAPS1", "Participant Recordings", id, "synced", paste(id,"_log_webcam_sync.csv", sep = ""), sep = "/")))
log$webcam_timestamp<- as.character(log$webcam_timestamp)
emotion_start <- log %>%
filter(entry=="Emotion Reels/Surprise A.mov") %>%
filter(event=="start") %>%
select(webcam_timestamp)
duration_start <- hms(emotion_start)
emotion_end <- log %>%
filter(entry=="Emotion Reels/Yawning A.mov") %>%
filter(event=="end") %>%
select(webcam_timestamp)
duration_end <- hms(emotion_end)
emotion_duration <- duration_end - duration_start
POSIXct_emotion_duration <- parse_date_time(emotion_duration,"ms")
emotion_duration <- format(POSIXct_emotion_duration, format="%H:%M:%OS")
#emotion_duration <- paste0("00:", emotion_duration)
emotion_times <- cbind(emotion_start, emotion_end, emotion_duration)
##ID
#enter child ID - eventually mega script will define this
id <- "MAPS-014"
sync_type1 <- c("MAPS-001", "MAPS-002", "MAPS-003", "MAPS-004", "MAPS-005", "MAPS-006", "MAPS-007", "MAPS-008", "MAPS-009", "MAPS-010", "MAPS-011", "MAPS-012")
##Location- servername
#on julianne's computer
username <- "myerju"
#on julianne's laptop
#username <- "julianne"
#import data
log <-  (read.csv(paste("", "Volumes", "MAPS1", "Participant Recordings", id, "synced", paste(id,"_log_webcam_sync.csv", sep = ""), sep = "/")))
log$webcam_timestamp<- as.character(log$webcam_timestamp)
emotion_start <- log %>%
filter(entry=="Emotion Reels/Surprise A.mov") %>%
filter(event=="start") %>%
select(webcam_timestamp)
duration_start <- hms(emotion_start)
emotion_end <- log %>%
filter(entry=="Emotion Reels/Yawning A.mov") %>%
filter(event=="end") %>%
select(webcam_timestamp)
duration_end <- hms(emotion_end)
emotion_duration <- duration_end - duration_start
POSIXct_emotion_duration <- parse_date_time(emotion_duration,"ms")
emotion_duration <- format(POSIXct_emotion_duration, format="%H:%M:%OS")
#emotion_duration <- paste0("00:", emotion_duration)
emotion_times <- cbind(emotion_start, emotion_end, emotion_duration)
colnames(emotion_times) <- c("start", "end", "duration")
write.csv(emotion_times, file = paste("", "Volumes", "MAPS1", "Participant Recordings", id, "CERT", paste(id,"_emotions_timepoints.csv", sep = ""), sep = "/"))
##ID
#enter child ID - eventually mega script will define this
id <- "MAPS-015"
sync_type1 <- c("MAPS-001", "MAPS-002", "MAPS-003", "MAPS-004", "MAPS-005", "MAPS-006", "MAPS-007", "MAPS-008", "MAPS-009", "MAPS-010", "MAPS-011", "MAPS-012")
##Location- servername
#on julianne's computer
username <- "myerju"
#on julianne's laptop
#username <- "julianne"
#import data
log <-  (read.csv(paste("", "Volumes", "MAPS1", "Participant Recordings", id, "synced", paste(id,"_log_webcam_sync.csv", sep = ""), sep = "/")))
log$webcam_timestamp<- as.character(log$webcam_timestamp)
emotion_start <- log %>%
filter(entry=="Emotion Reels/Surprise A.mov") %>%
filter(event=="start") %>%
select(webcam_timestamp)
duration_start <- hms(emotion_start)
emotion_end <- log %>%
filter(entry=="Emotion Reels/Yawning A.mov") %>%
filter(event=="end") %>%
select(webcam_timestamp)
duration_end <- hms(emotion_end)
emotion_duration <- duration_end - duration_start
POSIXct_emotion_duration <- parse_date_time(emotion_duration,"ms")
emotion_duration <- format(POSIXct_emotion_duration, format="%H:%M:%OS")
#emotion_duration <- paste0("00:", emotion_duration)
emotion_times <- cbind(emotion_start, emotion_end, emotion_duration)
colnames(emotion_times) <- c("start", "end", "duration")
write.csv(emotion_times, file = paste("", "Volumes", "MAPS1", "Participant Recordings", id, "CERT", paste(id,"_emotions_timepoints.csv", sep = ""), sep = "/"))
